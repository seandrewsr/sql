
-- create the master key w/password
use master
create master key encryption by password = 'your_super_secret_password'

-- create the self-signed certificate
use [your_existing_database]
create certificate your_certificate_name with subject = 'your_certificate_name'

-- create database symetric key
use [your_existing_database]
create symmetric key your_symmetrickey_name
with algorithm = aes_128
encryption by certificate your_certificate_name

-- refresh parameter encryption info
alter database scoped configuration clear procedure_cache;

-- open the symmetric key
open symmetric key your_symmetrickey_name decryption by certificate your_certificate_name

  -- encrypt an existing column
  update [your_sql_table]
  set [sql_column_name] = encryptbykey(key_guid('your_symmetrickey_name'), [sql_column_name])

  -- encrypt another existing column
  update [your_other_sql_table]
  set [another_sql_column_name] = encryptbykey(key_guid('your_symmetrickey_name'), [another_sql_column_name])

-- must always close the symetric key
close symmetric key your_symmetrickey_name



-- query the encrypted sql column
declare @symkey_guid as uniqueidentifier = key_guid('your_symmetrickey_name')
if( @symkey_guid is not null)
  begin
     -- open the symetric key first before running query
    open symmetric key your_symmetrickey_name decryption by certificate your_certificate_name

      -- run your select query
      select
      convert(varchar(200), decryptbykey([sql_column_name])) as [sql_column_name], -- returns null if symetric key is not opened first
      convert(varchar(200), decryptbykey([another_sql_column_name])) as [another_sql_column_name], -- returns null if symetric key is not opened first
      from [your_existing_database].[dbo].[ your_sql_table]

    -- must always close the symetric key after running the query
    close symmetric key your_symmetrickey_name
  end
else
  select '@symkey_guid not defined' as [error]




-- update an encrypted sql column
declare @symkey_guid as uniqueidentifier = key_guid('your_symmetrickey_name')
if( @symkey_guid is not null)
  begin
     -- open the symetric key first before running query
    open symmetric key your_symmetrickey_name decryption by certificate your_certificate_name

      -- do your your update
      update [your_existing_database].[dbo].[ your_sql_table]
      set [sql_column_name] = EncryptByKey(Key_GUID('your_symmetrickey_name'),'the column value you wish to set')
      where [sql_column_name] = 'some filter value'

    -- must always close the symetric key after running the query
    close symmetric key your_symmetrickey_name
  end
else
  select '@symkey_guid not defined' as [error]

